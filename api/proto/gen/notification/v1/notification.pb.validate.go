// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification/v1/notification.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendStrategyMultiError, or
// nil if none found.
func (m *SendStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.StrategyType.(type) {
	case *SendStrategy_Immediate:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImmediate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImmediate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Immediate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Delayed:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelayed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelayed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Delayed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Scheduled:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScheduled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScheduled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Scheduled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_TimeWindow:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeWindow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeWindow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "TimeWindow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SendStrategyMultiError(errors)
	}

	return nil
}

// SendStrategyMultiError is an error wrapping multiple validation errors
// returned by SendStrategy.ValidateAll() if the designated constraints aren't met.
type SendStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategyMultiError) AllErrors() []error { return m }

// SendStrategyValidationError is the validation error returned by
// SendStrategy.Validate if the designated constraints aren't met.
type SendStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategyValidationError) ErrorName() string { return "SendStrategyValidationError" }

// Error satisfies the builtin error interface
func (e SendStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategyValidationError{}

// Validate checks the field values on ImmediateStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImmediateStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImmediateStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImmediateStrategyMultiError, or nil if none found.
func (m *ImmediateStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *ImmediateStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImmediateStrategyMultiError(errors)
	}

	return nil
}

// ImmediateStrategyMultiError is an error wrapping multiple validation errors
// returned by ImmediateStrategy.ValidateAll() if the designated constraints
// aren't met.
type ImmediateStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImmediateStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImmediateStrategyMultiError) AllErrors() []error { return m }

// ImmediateStrategyValidationError is the validation error returned by
// ImmediateStrategy.Validate if the designated constraints aren't met.
type ImmediateStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImmediateStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImmediateStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImmediateStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImmediateStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImmediateStrategyValidationError) ErrorName() string {
	return "ImmediateStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e ImmediateStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImmediateStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImmediateStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImmediateStrategyValidationError{}

// Validate checks the field values on DelayedStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelayedStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelayedStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelayedStrategyMultiError, or nil if none found.
func (m *DelayedStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *DelayedStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DelaySeconds

	if len(errors) > 0 {
		return DelayedStrategyMultiError(errors)
	}

	return nil
}

// DelayedStrategyMultiError is an error wrapping multiple validation errors
// returned by DelayedStrategy.ValidateAll() if the designated constraints
// aren't met.
type DelayedStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelayedStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelayedStrategyMultiError) AllErrors() []error { return m }

// DelayedStrategyValidationError is the validation error returned by
// DelayedStrategy.Validate if the designated constraints aren't met.
type DelayedStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelayedStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelayedStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelayedStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelayedStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelayedStrategyValidationError) ErrorName() string { return "DelayedStrategyValidationError" }

// Error satisfies the builtin error interface
func (e DelayedStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelayedStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelayedStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelayedStrategyValidationError{}

// Validate checks the field values on ScheduledStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduledStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduledStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduledStrategyMultiError, or nil if none found.
func (m *ScheduledStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduledStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledStrategyValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduledStrategyMultiError(errors)
	}

	return nil
}

// ScheduledStrategyMultiError is an error wrapping multiple validation errors
// returned by ScheduledStrategy.ValidateAll() if the designated constraints
// aren't met.
type ScheduledStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduledStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduledStrategyMultiError) AllErrors() []error { return m }

// ScheduledStrategyValidationError is the validation error returned by
// ScheduledStrategy.Validate if the designated constraints aren't met.
type ScheduledStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledStrategyValidationError) ErrorName() string {
	return "ScheduledStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduledStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledStrategyValidationError{}

// Validate checks the field values on TimeWindowStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeWindowStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeWindowStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeWindowStrategyMultiError, or nil if none found.
func (m *TimeWindowStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeWindowStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTimeMilliseconds

	// no validation rules for EndTimeMilliseconds

	if len(errors) > 0 {
		return TimeWindowStrategyMultiError(errors)
	}

	return nil
}

// TimeWindowStrategyMultiError is an error wrapping multiple validation errors
// returned by TimeWindowStrategy.ValidateAll() if the designated constraints
// aren't met.
type TimeWindowStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeWindowStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeWindowStrategyMultiError) AllErrors() []error { return m }

// TimeWindowStrategyValidationError is the validation error returned by
// TimeWindowStrategy.Validate if the designated constraints aren't met.
type TimeWindowStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeWindowStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeWindowStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeWindowStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeWindowStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeWindowStrategyValidationError) ErrorName() string {
	return "TimeWindowStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e TimeWindowStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeWindowStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeWindowStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeWindowStrategyValidationError{}

// Validate checks the field values on HandleNotificationResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleNotificationResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleNotificationResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandleNotificationResultRequestMultiError, or nil if none found.
func (m *HandleNotificationResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleNotificationResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	if all {
		switch v := interface{}(m.GetOriginalRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleNotificationResultRequestValidationError{
					field:  "OriginalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleNotificationResultRequestValidationError{
					field:  "OriginalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleNotificationResultRequestValidationError{
				field:  "OriginalRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleNotificationResultRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleNotificationResultRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleNotificationResultRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleNotificationResultRequestMultiError(errors)
	}

	return nil
}

// HandleNotificationResultRequestMultiError is an error wrapping multiple
// validation errors returned by HandleNotificationResultRequest.ValidateAll()
// if the designated constraints aren't met.
type HandleNotificationResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleNotificationResultRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleNotificationResultRequestMultiError) AllErrors() []error { return m }

// HandleNotificationResultRequestValidationError is the validation error
// returned by HandleNotificationResultRequest.Validate if the designated
// constraints aren't met.
type HandleNotificationResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleNotificationResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleNotificationResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleNotificationResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleNotificationResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleNotificationResultRequestValidationError) ErrorName() string {
	return "HandleNotificationResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleNotificationResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleNotificationResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleNotificationResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleNotificationResultRequestValidationError{}

// Validate checks the field values on HandleNotificationResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *HandleNotificationResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleNotificationResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandleNotificationResultResponseMultiError, or nil if none found.
func (m *HandleNotificationResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleNotificationResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return HandleNotificationResultResponseMultiError(errors)
	}

	return nil
}

// HandleNotificationResultResponseMultiError is an error wrapping multiple
// validation errors returned by
// HandleNotificationResultResponse.ValidateAll() if the designated
// constraints aren't met.
type HandleNotificationResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleNotificationResultResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleNotificationResultResponseMultiError) AllErrors() []error { return m }

// HandleNotificationResultResponseValidationError is the validation error
// returned by HandleNotificationResultResponse.Validate if the designated
// constraints aren't met.
type HandleNotificationResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleNotificationResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleNotificationResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleNotificationResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleNotificationResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleNotificationResultResponseValidationError) ErrorName() string {
	return "HandleNotificationResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleNotificationResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleNotificationResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleNotificationResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleNotificationResultResponseValidationError{}

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for BizId

	// no validation rules for Receiver

	// no validation rules for Channel

	// no validation rules for TemplateId

	// no validation rules for TemplateParams

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}

// Validate checks the field values on SendNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationResponseMultiError, or nil if none found.
func (m *SendNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestKey

	// no validation rules for NotificationId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationResponseValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationResponseValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationResponseValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorCode

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return SendNotificationResponseMultiError(errors)
	}

	return nil
}

// SendNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by SendNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationResponseMultiError) AllErrors() []error { return m }

// SendNotificationResponseValidationError is the validation error returned by
// SendNotificationResponse.Validate if the designated constraints aren't met.
type SendNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationResponseValidationError) ErrorName() string {
	return "SendNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationResponseValidationError{}

// Validate checks the field values on SendNotificationAsyncRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationAsyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationAsyncRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationAsyncRequestMultiError, or nil if none found.
func (m *SendNotificationAsyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationAsyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for BizId

	// no validation rules for Receiver

	// no validation rules for Channel

	// no validation rules for TemplateId

	// no validation rules for TemplateParams

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationAsyncRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationAsyncRequestValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationAsyncRequestValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackEndpoint

	if len(errors) > 0 {
		return SendNotificationAsyncRequestMultiError(errors)
	}

	return nil
}

// SendNotificationAsyncRequestMultiError is an error wrapping multiple
// validation errors returned by SendNotificationAsyncRequest.ValidateAll() if
// the designated constraints aren't met.
type SendNotificationAsyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationAsyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationAsyncRequestMultiError) AllErrors() []error { return m }

// SendNotificationAsyncRequestValidationError is the validation error returned
// by SendNotificationAsyncRequest.Validate if the designated constraints
// aren't met.
type SendNotificationAsyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationAsyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationAsyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationAsyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationAsyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationAsyncRequestValidationError) ErrorName() string {
	return "SendNotificationAsyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationAsyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationAsyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationAsyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationAsyncRequestValidationError{}

// Validate checks the field values on SendNotificationAsyncResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationAsyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationAsyncResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendNotificationAsyncResponseMultiError, or nil if none found.
func (m *SendNotificationAsyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationAsyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationAsyncResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationAsyncResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationAsyncResponseValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CallbackEndpoint != nil {
		// no validation rules for CallbackEndpoint
	}

	if len(errors) > 0 {
		return SendNotificationAsyncResponseMultiError(errors)
	}

	return nil
}

// SendNotificationAsyncResponseMultiError is an error wrapping multiple
// validation errors returned by SendNotificationAsyncResponse.ValidateAll()
// if the designated constraints aren't met.
type SendNotificationAsyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationAsyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationAsyncResponseMultiError) AllErrors() []error { return m }

// SendNotificationAsyncResponseValidationError is the validation error
// returned by SendNotificationAsyncResponse.Validate if the designated
// constraints aren't met.
type SendNotificationAsyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationAsyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationAsyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationAsyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationAsyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationAsyncResponseValidationError) ErrorName() string {
	return "SendNotificationAsyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationAsyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationAsyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationAsyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationAsyncResponseValidationError{}

// Validate checks the field values on BatchSendNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchSendNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendNotificationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchSendNotificationsRequestMultiError, or nil if none found.
func (m *BatchSendNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchSendNotificationsRequestValidationError{
					field:  "BaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchSendNotificationsRequestValidationError{
					field:  "BaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchSendNotificationsRequestValidationError{
				field:  "BaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BatchSendNotificationsRequestMultiError(errors)
	}

	return nil
}

// BatchSendNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by BatchSendNotificationsRequest.ValidateAll()
// if the designated constraints aren't met.
type BatchSendNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendNotificationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendNotificationsRequestMultiError) AllErrors() []error { return m }

// BatchSendNotificationsRequestValidationError is the validation error
// returned by BatchSendNotificationsRequest.Validate if the designated
// constraints aren't met.
type BatchSendNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendNotificationsRequestValidationError) ErrorName() string {
	return "BatchSendNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSendNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendNotificationsRequestValidationError{}

// Validate checks the field values on BatchSendNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchSendNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendNotificationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchSendNotificationsResponseMultiError, or nil if none found.
func (m *BatchSendNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchSendNotificationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchSendNotificationsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchSendNotificationsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for SuccessCount

	if len(errors) > 0 {
		return BatchSendNotificationsResponseMultiError(errors)
	}

	return nil
}

// BatchSendNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by BatchSendNotificationsResponse.ValidateAll()
// if the designated constraints aren't met.
type BatchSendNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendNotificationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendNotificationsResponseMultiError) AllErrors() []error { return m }

// BatchSendNotificationsResponseValidationError is the validation error
// returned by BatchSendNotificationsResponse.Validate if the designated
// constraints aren't met.
type BatchSendNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendNotificationsResponseValidationError) ErrorName() string {
	return "BatchSendNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSendNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendNotificationsResponseValidationError{}

// Validate checks the field values on BatchSendNotificationsAsyncRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchSendNotificationsAsyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendNotificationsAsyncRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchSendNotificationsAsyncRequestMultiError, or nil if none found.
func (m *BatchSendNotificationsAsyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendNotificationsAsyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchSendNotificationsAsyncRequestValidationError{
					field:  "BaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchSendNotificationsAsyncRequestValidationError{
					field:  "BaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchSendNotificationsAsyncRequestValidationError{
				field:  "BaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackEndpoint

	if len(errors) > 0 {
		return BatchSendNotificationsAsyncRequestMultiError(errors)
	}

	return nil
}

// BatchSendNotificationsAsyncRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchSendNotificationsAsyncRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchSendNotificationsAsyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendNotificationsAsyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendNotificationsAsyncRequestMultiError) AllErrors() []error { return m }

// BatchSendNotificationsAsyncRequestValidationError is the validation error
// returned by BatchSendNotificationsAsyncRequest.Validate if the designated
// constraints aren't met.
type BatchSendNotificationsAsyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendNotificationsAsyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendNotificationsAsyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendNotificationsAsyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendNotificationsAsyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendNotificationsAsyncRequestValidationError) ErrorName() string {
	return "BatchSendNotificationsAsyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSendNotificationsAsyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendNotificationsAsyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendNotificationsAsyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendNotificationsAsyncRequestValidationError{}

// Validate checks the field values on BatchSendNotificationsAsyncResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchSendNotificationsAsyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendNotificationsAsyncResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchSendNotificationsAsyncResponseMultiError, or nil if none found.
func (m *BatchSendNotificationsAsyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendNotificationsAsyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchSendNotificationsAsyncResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchSendNotificationsAsyncResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchSendNotificationsAsyncResponseValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackEndpoint

	if len(errors) > 0 {
		return BatchSendNotificationsAsyncResponseMultiError(errors)
	}

	return nil
}

// BatchSendNotificationsAsyncResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchSendNotificationsAsyncResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchSendNotificationsAsyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendNotificationsAsyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendNotificationsAsyncResponseMultiError) AllErrors() []error { return m }

// BatchSendNotificationsAsyncResponseValidationError is the validation error
// returned by BatchSendNotificationsAsyncResponse.Validate if the designated
// constraints aren't met.
type BatchSendNotificationsAsyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendNotificationsAsyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendNotificationsAsyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendNotificationsAsyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendNotificationsAsyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendNotificationsAsyncResponseValidationError) ErrorName() string {
	return "BatchSendNotificationsAsyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSendNotificationsAsyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendNotificationsAsyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendNotificationsAsyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendNotificationsAsyncResponseValidationError{}

// Validate checks the field values on QueryNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotificationRequestMultiError, or nil if none found.
func (m *QueryNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for TaskId

	if len(errors) > 0 {
		return QueryNotificationRequestMultiError(errors)
	}

	return nil
}

// QueryNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by QueryNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotificationRequestMultiError) AllErrors() []error { return m }

// QueryNotificationRequestValidationError is the validation error returned by
// QueryNotificationRequest.Validate if the designated constraints aren't met.
type QueryNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotificationRequestValidationError) ErrorName() string {
	return "QueryNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotificationRequestValidationError{}

// Validate checks the field values on QueryNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotificationResponseMultiError, or nil if none found.
func (m *QueryNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotificationResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.OriginalRequest.(type) {
	case *QueryNotificationResponse_Single:
		if v == nil {
			err := QueryNotificationResponseValidationError{
				field:  "OriginalRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSingle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  "Single",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  "Single",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSingle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotificationResponseValidationError{
					field:  "Single",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *QueryNotificationResponse_Batch:
		if v == nil {
			err := QueryNotificationResponseValidationError{
				field:  "OriginalRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  "Batch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotificationResponseValidationError{
						field:  "Batch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotificationResponseValidationError{
					field:  "Batch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return QueryNotificationResponseMultiError(errors)
	}

	return nil
}

// QueryNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by QueryNotificationResponse.ValidateAll() if the
// designated constraints aren't met.
type QueryNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotificationResponseMultiError) AllErrors() []error { return m }

// QueryNotificationResponseValidationError is the validation error returned by
// QueryNotificationResponse.Validate if the designated constraints aren't met.
type QueryNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotificationResponseValidationError) ErrorName() string {
	return "QueryNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotificationResponseValidationError{}
